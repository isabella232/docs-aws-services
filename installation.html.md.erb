---
breadcrumb: PCF Services
title: Installing the Service Broker
---

This topic describes how to install the Service Broker for AWS by configuring your AWS account and importing the product file into Ops Manager.


##<a id="prerequisites"></a>Installation Prerequisites
* Pivotal Cloud Foundry version 1.8 or higher
* An Amazon Web Services (AWS) account
* MySQL for PCF v2, or an already-created MySQL or PostgreSQL database

##<a id="setup"></a>Step 1: Set Up AWS
To configure your AWS account to enable the Service Broker 
to create and manage resources, you must complete several tasks.

1. First, [create a new Identity and Access Management user](#create-iam-user). An Identity and Access Management (IAM) user is a
persona with a set of attached permissions that can be used by the person or service interacting with AWS.
1. If you are using EMR clusters, [set up your EMR policy](#emr-policy). On the Amazon console, you will "attach" an EMR policy 
to your IAM user.
1. Create a [Service Key policy](#service_key_policies#). Service Key policies specify the permissions provided by a service key.
1. Create a [Bind Key policy](#bind_key_policies). Bind Key policies specify bind actions for specific servies.

###<a id="create-iam-user"></a>Create a New IAM User 

Create a new Identity and Access Management (IAM) user for the PCF cluster in the **AWS IAM** console by following the procedure below. 
<p class="note"><strong>Note</strong>: If you have more than one PCF deployment, you must create an IAM user for each deployment. 
Create a new IAM user in your AWS account (do not use the same IAM user that installed PCF on AWS,
as that user profile has different policy restrictions).</p> 

1. Select **Policies** and click **Create Policy**. 
1. Choose **Create Your Own Policy**. 
1. Enter `PCFInstallationPolicy` for **Policy Name** and `Installation Policy for PCF` for  **Description**. 
<p class="note"><strong>Note</strong>: The Service Broker for AWS also allows a custom name for the `PCFInstallationPolicy`. 
If you wish to use a custom name, provide it here instead of `PCFInstallationPolicy`. 
Later, during Broker Configuration, you will need to enter this custom name.</p>  
1. Copy the following text into the **Policy Document** section:

            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Action": [
                            "s3:CreateBucket",
                            "s3:DeleteBucket",
                            "s3:PutBucketAcl",
                            "s3:PutBucketLogging",
                            "s3:PutBucketPolicy",
                            "s3:PutBucketTagging",
                            "s3:GetObject",
                            "s3:ListBucket",
                            "iam:CreateAccessKey",
                            "iam:CreateUser",
                            "iam:GetUser",
                            "iam:DeleteAccessKey",
                            "iam:DeleteUser",
                            "iam:DeleteUserPolicy",
                            "iam:ListAccessKeys",
                            "iam:ListAttachedUserPolicies",
                            "iam:ListUserPolicies",
                            "iam:ListPolicies",
                            "iam:PutUserPolicy",
                            "iam:GetPolicy",
                            "iam:GetAccountAuthorizationDetails",
                            "rds:CreateDBCluster",
                            "rds:CreateDBInstance",
                            "rds:DeleteDBCluster",
                            "rds:DeleteDBInstance",
                            "rds:DescribeDBClusters",
                            "rds:DescribeDBInstances",
                            "rds:DescribeDBSnapshots",
                            "rds:DeleteDBSnapshot",
                            "rds:CreateDBParameterGroup",
                            "rds:ModifyDBParameterGroup",
                            "rds:DeleteDBParameterGroup",
                            "dynamodb:ListTables",
                            "dynamodb:DeleteTable",
                            "dynamodb:DescribeTable",
                            "sqs:CreateQueue",
                            "sqs:DeleteQueue"
                        ],
                        "Effect": "Allow",
                        "Resource": "*"
                    }
                ]
            }
1. Click **Validate Policy** to check for errors. 
1. Click **Create Policy**. This creates an AWS policy that you must apply to every IAM user you create for the Service Broker for AWS. 
1. For each IAM user, click the user name > **Permissions** tab > **Attach Policy** and select **PCFInstallationPolicy**. 
1. Record the **AWS Access Key ID** and **Secret Access Key** for each of your PCF IAM accounts for later use.


###<a id="emr-policy"></a>Set Up EMR Policy 
Amazon Elastic MapReduce (EMR) is a managed cluster platform for AWS that simplifies running big data frameworks, such as Apache Hadoop and Apache Spark, to process and analyze vast amounts of data. The PCF EMR Service Broker enables users to provision and manage an Amazon EMR cluster.

Prerequisite: You must first create your AWS IAM user before you can configure the EMR policy. 
For information about creating your AWS IAM user, see [Set Up AWS](#setup), above.

EMR requires that the **AmazonElasticMapReduceFullAccess** policy be attached to the service broker's IAM user. 
Follow these steps to attach the policy to the user:

1. View your IAM users. Locate the IAM user that you created in [Set Up AWS](#setup), above.
1. In the user summary page, click **Add Permissions**.
1. Select **Attach existing policies directly**.
1. Find **AmazonElasticMapReduceFullAccess** and attach it to the user.


#### <a id="create-roles"></a>Create Roles (EMR Only)
EMR requires two roles in order to provision a cluster:

+ an EMR service role
+ an EMR EC2 instance profile

By default, the AWS Broker uses `PCF_EMR_Service_Role` and `PCF_EMR_EC2_Instance_Profile`. You need to create these roles and attach the necessary AWS managed policies.

**Create the EMR Service Role (Required)**

1. In the IAM Console, select **Roles** and click **Create Role**.
1. In the **Select type of trusted entity** section, click **AWS service.**
1. In the **Choose the service that will use this role** section, click **EMR**. 
1. In the **Select your use case** section, click **EMR**, which is followed by the description "Allows Elastic MapReduce to call AWS services such as EC2 on your behalf."
1. Click **Next:Permissions**.
1. The **Attached permissions policy** page should state that the type of role you selected requires the **AmazonElasticMapReduceRole** policy. Click **Next:Review**.
1. On the Review page, provide a **Role name** and a **Role description**. Pivotal recommends using 
`PCF_EMR_Service_Role` as the name, and 
`EMR Service Role for AWS Broker` as the description.
1. Click **Create role**.

**Create the EMR EC2 Instance Profile (Required)**

1. In the IAM Console, select **Roles** and click **Create Role**.
1. In the **Select type of trusted entity** section, click **AWS service.**
1. In the **Choose the service that will use this role** section, click **EMR**.
1. In the **Select your use case** section, click **EMR Role for EC2**, which is followed by the description "Allows EC2 instances in an Elastic MapReduce cluster to call AWS services such as S3 on your behalf."
1. On the Review page, provide a **Role name** and a **Role description**. Pivotal recommends using
 `PCF_EMR_EC2_Instance_Profile` as the name, and 
 `EMR EC2 Instance Profile for AWS Broker` as the description.
1. After you have created the role, select **Roles**. From the **Role name** list, click `PCF_EMR_EC2_Instance_Profile` or whatever name you used for the role that you just created. On the  **Summary** page for the role, verify that it has an associated **Instance Profile ARN**. The Amazon Resource Name (ARN) is a string value.

**Create the EMR Auto Scaling Role (Optional)**

EMR also requires an additional role to enable autoscaling: `EMR_AutoScaling_DefaultRole`.
The role is automatically created for you by AWS (if it does not yet exist) under very specific circumstances. 
It cannot be created in the same way as the previous roles. In order to create it, you must follow the instructions in the relevant section below. 
For more information about the Auto Scaling role, see [Creating the IAM Role for Automatic Scaling](http://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-automatic-scaling.html#emr-automatic-scaling-iam-role).

Creating this Auto Scaling role requires different manual steps due to limitations within the GO SDK/AWS IAM Role creation console. 
The easiest and quickest way to ensure that `EMR_AutoScaling_DefaultRole` is set up correctly 
is to create an EMR Cluster through the EMR Console. You can terminate the cluster immediately after the role is created.
In the IAM Console, search for `EMR_AutoScaling_DefaultRole`. If the role already exists, click it to review summary information.
Verify that the role:

+ has the AWS managed policy called **AmazonElasticMapReduceforAutoScalingRole** attached
+ shows, under the **Trust relationships** tab, that **elasticmapreduce.amazonaws.com** and
**application-autoscaling.amazonaws.com** are recognized as **Trusted entities**.

If the role exists and has these properties, no further configuration is necessary.

If the `EMR_AutoScaling_DefaultRole` does not exist, perform the follow steps:

1. In the EMR Console, click **Create Cluster**.
1. Select **Go to advanced options**.
1. Click **Next** to accept default settings until **Step 4: Security
Under Permissions**. At this step, select **Custom**.
1. For **Auto Scaling role**, select **Create default role**.
1. Click **Create Cluster**.
1. Check IAM to see that EMR_AutoScaling_DefaultRole was created.
1. Terminate your cluster.

For more information about creating IAM roles, see [Configure IAM Roles and the Amazon EC2 Instance Profile to Access Other AWS Services](http://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-iam-roles.html).

###<a id="service_key_policies"></a>Service Key Policies
The Service Broker for AWS allows app developers to create service keys for their service instances. 
Creating a service key creates an IAM user with a templated policy 
and provides the developer with Access Key credentials to the actions listed in the policies below.
For more information on creating service keys, see [Create Service Key](./servicekeys.html#create).

As of v1.1.0, Service Key policy names are configurable. You can choose your own policy name and configure that name in each service by updating the **Service Key Policy Name** field. The default names are used below. 

Create the policy templates for each service that you will enable by logging into the AWS console and doing the following:

1. Select **Policies** and click **Create Policy**. 
1. Choose **Create Your Own Policy**. 
1. Enter `PCFAppDeveloperPolicy-s3` for the **Policy Name** and `Service Broker for AWS Service Key policy for S3` for the **Description**.
1. Enter the following text in the **Policy Document** section, or create your own policy template.

            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "allowtagging",
                        "Effect": "Allow",
                        "Action": [
                            "s3:GetBucketTagging",
                            "s3:PutBucketTagging"
                        ],
                        "Resource": [
                            "arn:aws:broker:resource::"
                        ]
                     }
                 ]
             }

1. Click **Validate Policy** to check for errors. 
1. Click **Create Policy**. This creates an AWS policy that you must apply to every IAM user you create for the Service Broker for AWS. 
1. Repeat steps 1-6 for `PCFAppDeveloperPolicy-sqs` `PCFAppDeveloperPolicy-dynamodb` `PCFAppDeveloperPolicy-rds` and `PCFAppDeveloperPolicy-emr`, using or modifying the examples below.

<strong>`PCFAppDeveloperPolicy-sqs` Example</strong>

```
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "Stmt1471890189000",
            "Effect": "Allow",
            "Action": [
                "sqs:ListQueues",
                "sqs:PurgeQueue",
                "sqs:ReceiveMessage",
                "sqs:SendMessage"
            ],
            "Resource": [
                "arn:aws:broker:resource::"
            ]
        }
    ]
}
```

<strong>`PCFAppDeveloperPolicy-dynamodb` Example</strong>

```
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "Stmt1471873911000",
            "Effect": "Allow",
            "Action": [
                "dynamodb:*"
            ],
            "Resource": [
                "arn:aws:broker:resource::"
            ]
        }
    ]
}
```

<strong>`PCFAppDeveloperPolicy-rds` Example</strong>

```
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "Stmt1471636048000",
            "Effect": "Allow",
            "Action": [
                "rds:ListTagsForResource",
                "rds:DescribeDbInstances"
            ],
            "Resource": [
                "arn:aws:broker:resource::"
            ]
        }
    ]
}
```

<strong>`PCFAppDeveloperPolicy-emr` Example</strong>

```
{
    "Version": "2012-10-17",
    "Statement": [{
        "Sid": "emrServiceKeyActions",
        "Effect": "Allow",
        "Action": [
            "elasticmapreduce:AddJobFlowSteps",
            "elasticmapreduce:CancelSteps",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:DescribeStep",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListSteps",
            "elasticmapreduce:ListBootstrapActions",
            "elasticmapreduce:PutAutoScalingPolicy"
        ],
        "Resource": [
            "*"
        ]
    }]
}
```

###<a id="bind_key_policies"></a>Bind Key Policies
In v1.5.0 and later of the AWS Services Broker, EMR setup requires that you specify a Bind Key policy separately from a Service Key policy. 

EMR does not use ARNs for access control, so the `Resource` you use to set up the policy must be `*`.
Because access control is enforced with cluster tagging, Pivotal recommends ensuring that 
applications/service key users do not have permission to modify cluster tags.
The broker will automatically add a condition to the policy that limits access to 
the associated EMR cluster. For more information, see [EMR Cluster Access](http://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-access-iam.html#emr-fine-grained-cluster-access).

To create the bind key policy template for EMR, log in to the AWS console and follow steps 1–6 of [Service Key Policies](#service-key-policies), above, using the following example:

```
{
    "Version": "2012-10-17",
    "Statement": [{
        "Sid": "emrBindActions",
        "Effect": "Allow",
        "Action": [
            "elasticmapreduce:AddJobFlowSteps",
            "elasticmapreduce:CancelSteps",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:DescribeStep",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListSteps",
            "elasticmapreduce:ListBootstrapActions",
            "elasticmapreduce:PutAutoScalingPolicy"
        ],
        "Resource": [
            "*"
        ]
    }]
}
```


##<a id="create-database"></a>Step 2: Create a Service Broker Database
To store its configuration information, the Service Broker for AWS requires access to a MySQL or PostgreSQL database that is highly available and regularly backed up.
Loss of this data will severely affect the ability of the service broker to manage configured service instances.
However, the AWS resources will not be affected. 

<<<<<<< HEAD
The database can be Pivotal MySQL, an external MySQL, or a PostgreSQL database (including an AWS RDS database). 

If you use a Pivotal MySQL database, the service broker will automatically provision the database. 
=======
The database can be MySQL for PCF v2 or an external MySQL or PostgreSQL database, including an AWS RDS database.

If you choose to use a MySQL for PCF v2 database, the service broker will automatically provision the database.
>>>>>>> b29f055... Changing to MySQL for PCF format [#158806209]

If you use an RDS MySQL or RDS PostgreSQL database, follow these steps:

1. In the AWS RDS console, create the appropriate database:
    * Choose the smallest DB instance class, `db.t2.micro`. 
    * Select `yes` for **Multi-AZ Deployment**. 
    * Choose `Provisioned IOPS (SSD)` for **Storage Type**. For a non-production database, you can choose `General Purpose (SSD)`.
    * Enter the minimum accepted value '5' to '100' GB of **Allocated Storage**. 
    * Leave **Provisioned IOPS** at the default value.
    * Enter `pcf-aws-services` for the **DB Instance Identifier**.
    * Enter suitable values for the **Master Username** and **Master Password**.

2. Record the Database IP, Database Port, Admin user, Admin password and Database Name. The Service Broker for AWS stores configuration information in this database. 

3. Ensure that the Service Broker for AWS will be able to connect to your database. If necessary for your deployment, modify your AWS VPC settings to allow access to the RDS database from an external IP address. For more information, see [Accessing a DB Instance in a VPC](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.Scenarios.html) in the AWS documentation.


##<a id="ASGs"></a>Step 3: Create Application Security Groups
To allow this service to have network access, you need to create Application Security Groups (ASGs). ASGs are collections of egress rules that specify the protocols, ports, and IP address ranges where app or task instances send traffic.

<p class="note"><strong>Note</strong>: Without Application Security Groups, the service will not be usable.</p>


### <a id="service-container-network-connections"></a> Service Container Network Connections###
This service is deployed as an application to the `iaas-brokers` space in the
`system` org, and requires the following outbound network connections:

|Destination        |Ports       |Protocol   |Reason
|---                |---         |---        |---
|`AWS_IP_RANGE`     |443, 5432, 1521, 1433, 3306         |tcp        |This service accesses RDS/S3

<p class="note"><strong>Note</strong>: The AWS IP range is available from <a href="http://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html#aws-ip-download">Amazon</a>. You may choose to use <a href="https://curl.haxx.se/">curl</a> and <a href="https://stedolan.github.io/jq/">jq</a> to convert the IP range as downloaded from Amazon into ASG rules:
      </p>

```
    curl -s https://ip-ranges.amazonaws.com/ip-ranges.json | \
    jq '[
      {
        ports: "443, 5432, 1521, 1433, 3306",
        protocol: "tcp",
        destination: .prefixes | map(select(.service == "AMAZON")) | .[] | .ip_prefix
      }
    ] | .' > aws-service-broker.json

```

This creates a configuration which allows traffic for all AWS Regions. You may wish to further filter the list of entries in the Application Security Group config to a specific set of AWS Regions by adding additional `jq` `map(select(.region == "REGION_NAME"))` statements for each region.

 Log in as an administrator and create an ASG called `aws-service-broker`, binding it to the `iaas-brokers` space in the `system` org:
<pre class="terminal">
$ cf create-security-group aws-service-broker aws-service-broker.json
$ cf bind-security-group aws-service-broker system iaas-brokers
</pre>


### <a id="application-container-network-connections"></a> Application Container Network Connections ###
Application containers that use instances of this service require the following outbound network connections:

|Destination        |Ports       |Protocol   |Reason
|---                |---         |---        |---
|`AWS_IP_RANGE`     |443, 5432, 1521, 1433, 3306         |tcp        |Application containers may access S3/RDS

Create an ASG called `aws-service-broker-app-containers` with the above configuration and bind it to the appropriate space. To give access to all started apps, use the `default-running` ASG set. For example:

```
[
  {
      "ports": "443, 5432, 1521, 1433, 3306",
      "protocol": "all",
      "destination": "192.0.2.0/14"
  },
  {
      "ports": "443, 5432, 1521, 1433, 3306",
      "protocol": "all",
      "destination": "198.51.100.0/22"
  },
  ...rest of AWS IPs elided...
]
```


##<a id="install"></a>Step 4: Install the Service Broker Tile in Ops Manager
To install the Service Broker for AWS tile in Ops Manager, complete the following steps:

1. Download the Service Broker for AWS product file from [Pivotal Network](https://network.pivotal.io/products/pcf-service-broker-for-aws).

1. From the Ops Manager Installation Dashboard, click **Import a Product** to upload the product file.

1. Click **Add** next to the uploaded product description in the **Available Products** view to add the product to your staging area.

1. Click on the newly added tile to configure the sections as described below.


###<a id="aws-config"></a>AWS Config
The setup in Step 1 must be successfully completed before beginning this configuration. You will need the AWS and database parameters from that step to successfully configure the broker.

1. Select the **AWS Config** side-tab.
    <%= image_tag("aws-sb-awsconfig.png") %>

1. Fill out the fields on the **AWS Config** pane:
<table class="nice">
        <th>Field</th>
        <th>Description</th>
        <tr><td><strong>Access Key ID</strong></td>
                <td>Enter the **AWS Access Key ID** from [Step 1: Set Up AWS](#setup).</td>
        </tr>
        <tr><td><strong>Secret Access Key</strong></td>
                <td>Enter the **Secret Access Key** from [Step 1: Set Up AWS](#setup).</td>
        </tr>
        <tr><td><strong>Temporary Credentials Timeout</strong></td>
                <td>Value stated in minutes.<br>
                    This is the time after which service key credentials will expire.<br>
                    To disable credential expiry, use a value of <code>0</code>.</td>
        </tr>
        <tr><td><strong>AWS Endpoint</strong></td>
                <td>Only modify this field if you are using Amazon’s Commercial Cloud Service.<br>
                    Otherwise, leave it as <code>Default</code>.</td>
        </tr>
        <tr><td><strong>Default Region</strong></td>
                <td>This is the AWS region that will be used as the default.<br>
                    You can change this later for a particular service.</td>
        </tr>
        <tr><td><strong>Default Availability Zone</strong></td>
                <td>This is the AWS Availability Zone that will be used as the default.<br>
                    This default will only be used where Multi-AZ is not selected.</td>
        </tr>
        <tr><td><strong>Default Tags</strong></td>
                <td>The broker automatically creates AWS tags for the service plan GUID
                    and the org-space GUID.<br>
                    You can also configure default tags to add for each AWS resource by entering them in the Default Tags text box, separated by a space.<br><br>
                    For example: <code>owner=operations env=production app=payroll</code>.</td>
        </tr>
</table>

1. Click **Save**.


###<a id="broker-config"></a>Broker Config
1. Select the **Broker Config** side-tab.
    <%= image_tag("images/aws-sb-brokerconfig.png") %>

1. Fill out the fields on the **Broker Config** pane:
<table class="nice">
        <th>Field</th>
        <th>Description</th>
        <tr><td><strong>App Instances</strong></td>
                <td>The number of instances of the service broker you want to run.<br>
                    The default is <code>2</code>.</td>
        </tr>
        <tr><td><strong>Broker IAM Policy Name</strong></td>
                <td>This should not be changed unless unless you configured a custom policy name earlier.</td>
        </tr>
        <tr><td><strong>Backing Database</strong></td>
                <td>Use this to choose the database type for the Service Broker Configuration.</td>
        </tr>
        <tr><td><strong>Backing Database: Pivotal MySQL</strong></td>
                <td>Enter the Plan Name to be used (e.g. 100mb) and a unique database name.
                    The database will be created during deployment if it does not already exist.</td>
        </tr>
        <tr><td><strong>Backing Database: External MySQL / External Postgres</strong></td>
                <td><ul>
                    <li><strong>Database Host</strong>
                        <ul>
                            <li>Enter the IP address of the database where the Service Broker for AWS will store configuration information.<br>
                                You can use the database you created in the AWS RDS console in [Step 2: Create a Service Broker Database](#create-database), or choose to use an existing database.
                            </li>
                        </ul>
                    <li><strong>Database Port</strong>
                        <ul>
                            <li>Enter the port number of your database.<br>
                                The default for <strong>PostgreSQL</strong> is <code>5432</code>.<br>
                                The default for <strong>MySQL</strong> is <code>3306</code>.
                            </li>
                        </ul>
                    <li><strong>Database Username / Password</strong>
                        <ul>
                            <li>Enter your database credentials.
                            </li>
                        </ul>
                    <li><strong>Database Port</strong>
                        <ul>
                            <li>Enter the name of the database.
                            </li>
                        </ul>
                    </ul>
            </td>
        </tr>
        <tr><td><strong>Database SSL Connection</strong></td>
                <td>Select <code>Enabled</code> if you want to encrypt traffic to your database, and add your custom root certificate into the <strong>Root Certificate</strong> text box.
                 Otherwise, select <code>Disabled</code>.</td>
        </tr>
</table>

1. Click **Save**.

<p class="note"><strong>Note:</strong> in the following sections that configure AWS Services, if you don't want to offer that specific service in your PCF Marketplace, then simply clear the <strong>Enable in Marketplace</strong> checkbox.</p>


###<a id="dynamodb-config"></a>DynamoDB Config
1. Select the **DynamoDB Config** side-tab.
    <%= image_tag("images/aws-sb-dynamodbconfig.png") %>

1. Fill out the fields on the **DynamoDB Config** pane:
<table class="nice">
        <th>Field</th>
        <th>Description</th>
        <tr><td><strong>Override Default AWS Region</strong></td>
                <td>This gives you the option to override the default Availability Zone used by the service.<br>
                To override the default, provide the name of the Availability Zone you want to use.<br>
                Leave this field blank to use the default Availability Zone.</td>
        </tr>
        <tr><td><strong>Enable in Marketplace</strong></td>
                <td>Select this if you want to enable the service in the Services Marketplace.</td>
        </tr>
        <tr><td><strong>Service Key Policy Name</strong></td>
                <td>This is the name of the managed policy that is attached to credentials generated by the Create Service Key command.<br>
                    This has a default setting. Do not change this unless you created a custom policy as described in [Service Key Policies](#service-key-policies).<br></td>
        </tr>
        <tr><td><strong>Quota Limit</strong></td>
                <td>This restricts the total number of instances.<br>
                    To disable the Quota limit, set its value to <code>0</code>.</td>
        </tr>
</table>

1. Click **Save**.

###<a id="rds-config"></a>RDS Config
1. Select the **RDS Config** side-tab.
    <%= image_tag("images/aws-sb-rdsconfig.png") %>

1. Fill out the fields on the **RDS Config** pane:
<table class="nice">
        <th>Field</th>
        <th>Description</th>
        <tr><td><strong>Override Default AWS Region</strong></td>
                <td>This gives you the option to override the default AWS Region used as the location for the service.<br>
                To override the default, provide the name of the region you want to use.<br>
                To use the default Availability Zone, leave this field blank.</td>
        </tr>
        <tr><td><strong>Override Default AWS Availability Zone</strong></td>
                <td>This gives you the option to override the default Availability Zone used by the service.<br>
                    To override the default, provide the name of the Availability Zone you want to use.<br>
                    To use the default Availability Zone, leave this field blank.</td>
        </tr>
        <tr><td><strong>RDS Instance Prefix</strong></td>
                <td>This is the prefix for creating RDS database instances.<br>
                    Value is set to <code>cf</code> by default.</td>
        </tr>
        <tr><td><strong>Service Key Policy Name</strong></td>
                <td>This is the name of the managed policy that is attached to credentials generated by the Create Service Key command.<br>
                    This has a default setting. Do not change this unless you created a custom policy as described in [Service Key Policies](#service-key-policies).<br></td>
        </tr>
        <tr><td><strong>Networking</strong></td>
                <td>This allows you to configure whether to use the <strong>Default VPC</strong> or a <strong>Custom VPC</strong>, and whether the instance is publicly accessible.<br>
                    To use a custom VPC, enter the <strong>DB Subnet Group Name</strong> and the <strong>VPC Security Group Ids</strong>.</td>
        </tr>
        <tr><td><strong>Enable Storage Encryption</strong></td>
                <td>This option is disabled by default.<br>
                    This allows you to enable RDS encryption for all service plans.<br>
                    <strong>Note:</strong><em> Not all regions and DB instance classes support encryption.</em><br>
                    If you enable this option, you will need to change the default plans to remove those that don’t support encryption.<br>
                    More information is available on Amazon's [Encrypting Amazon RDS Resources](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html#d0e21710) page.
        </tr>
        <tr><td><strong>Enable in Marketplace</strong></td>
                <td>Select this if you want to enable the service in the Services Marketplace.</td>
        </tr>
        <tr><td><strong>Quota Limit</strong></td>
                <td>This restricts the total number of instances.<br>
                    To disable the Quota limit, set its value to <code>0</code>.</td>
        </tr>
        <tr><td><strong>Plans</strong></td>
                <td>
                    For each RDS Database, the Service Broker for AWS includes several default plans for use:<br><br>
                    <ul>
                    <li><strong>Basic</strong>
                        <ul>
                            <li>For small projects and during development.
                            </li>
                        </ul>
                    <li><strong>Standard</strong>
                        <ul>
                            <li>For a small production database (multi-AZ, 2vCPU, 7.5GB).
                            </li>
                        </ul>
                    <li><strong>Advanced</strong>
                        <ul>
                            <li>For a mid-sized database (multi-AZ, 4 vCPU, 15GB).
                            </li>
                        </ul>
                    <li><strong>Enterprise</strong>
                        <ul>
                            <li>For a large database (multi-AZ, 8 vCPU, 32GB).
                            </li>
                        </ul>
                    </ul>
            </td>
        </tr>
</table>

1. You can view and edit the configuration of existing plans by clicking the arrow next to the plan name.
    <%= image_tag("images/aws-sb-rdseditplan.png") %>
    <p class="note"><strong>Note</strong>: If you edit an existing service plan, only <em>future</em> instances of that services plan will be changed. Ask your Admin to modify existing instances.</p>

1. You can also create a new custom plan by clicking the **Add** button and completing the following fields:
<table class="nice">
        <th>Field</th>
        <th>Description</th>
        <tr><td><strong>Plan Name</strong></td>
                <td>The name of the plan in the Services Marketplace.</td>
        </tr>
        <tr><td><strong>Plan Description</strong></td>
                <td>The description of the plan in the Services Marketplace.</td>
        </tr>
        <tr><td><strong>Plan Features</strong></td>
                <td>The list of features displayed in Apps Manager.</td>
        </tr>
        <tr><td><strong>Free</strong></td>
                <td>Enable whether this plan appears as free in the Services Marketplace.</td>
        </tr>
        <tr><td><strong>Engine</strong></td>
                <td>This must be `postgres` or `mysql`.</td>
        </tr>
        <tr><td><strong>Engine Version</strong></td>
                <td>The version that your database uses for this instance.</td>
        </tr>
        <tr><td><strong>DB Instance Class</strong></td>
                <td>The class that determines what hardware runs the database instance.</td>
        </tr>
        <tr><td><strong>Allocated Storage (GB)</strong></td>
                <td>The amount of storage allocated to the database.</td>
        </tr>
        <tr><td><strong>Storage Type</strong></td>
                <td>This can be Magnetic (<code>standard</code>), SSD (<code>gp2</code>) or Provisioned IOPS (<code>io1</code>).</td>
        </tr>
        <tr><td><strong>Iops (Enter if your storage type is io1)</strong></td>
                <td>The IOPS rate for the database instance. Only required if your Storage Type is <code>io1</code>.</td>
        </tr>
        <tr><td><strong>Backup Retention Period</strong></td>
                <td>How long to retain backups (typically 7 days).<br>
                    To disable automated backups, use a value of <code>0</code>.</td>
        </tr>
        <tr><td><strong>Preferred Backup Window</strong></td>
                <td>The daily time range during which automated backups are created if automated backups are enabled.<br>
                    Must be in Universal Coordinated Time (UTC) in the format HH24:MI-HH24:MI.<br>
                    Must be at least 30 minutes. e.g. <code>13:00-14:00</code></td>
        </tr>
        <tr><td><strong>Copy Tags to Snapshot</strong></td>
                <td>Enable whether to copy instance tags to database snapshots</td>
        </tr>
        <tr><td><strong>Multi AZ</strong></td>
                <td>Enable whether to automatically run in multiple Availability Zones.</td>
        </tr>
        <tr><td><strong>Enable Storage Encryption</strong></td>
                <td>Enable whether the database instance should be encrypted for this service plan.<br>
                    Selecting 'Enable Storage Encryption for All Plans' above will override this setting.<br>
                    <strong>Note:</strong><em> Not all instance classes support encryption.</em><br>
                    More information is available on Amazon's [Encrypting Amazon RDS Resources](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html#d0e21710) page.</td>
        </tr>
        <tr><td><strong>User Privileges</strong></td>
                <td>For flexibility, allows configuration of database user privileges by service plan.<br>
                    Use this to secure the privileges you want for your developers or apps.</td>
        </tr>
        <tr><td><strong>Require SLL for communication</strong></td>
                <td>Require an SSL Connection when using the database.</td>
        </tr>
        <tr><td><strong>DB Parameter Group Name</strong></td>
                <td>This allows you to associate an existing DB Parameter Group Name with this service plan.<br>
                    Use the AWS Console to create the DB Parameter Group.</td>
        </tr>
</table>

1. Click **Save**.


###<a id="s3-config"></a>S3 Config
1. Select the **S3 Config** side-tab.
    <%= image_tag("images/aws-sb-s3config.png") %>

1. Fill out the fields on the **S3 Config** pane:
<table class="nice">
        <th>Field</th>
        <th>Description</th>
        <tr><td><strong>Override Default AWS Region</strong></td>
                <td>This gives you the option to override the default AWS Region used as the location for the service.<br>
                To override the default, provide the name of the region you want to use.<br>
                To use the default Availability Zone, leave this field blank.</td>
        </tr>
        <tr><td><strong>Enable in Marketplace</strong></td>
                <td>Select this if you want to enable the service in the Services Marketplace.</td>
        </tr>
        <tr><td><strong>Service Key Policy Name</strong></td>
                <td>This is the name of the managed policy that is attached to credentials generated by the Create Service Key command.<br>
                    This has a default setting. Do not change this unless you created a custom policy as described in [Service Key Policies](#service-key-policies).<br></td>
        </tr>
        <tr><td><strong>Quota Limit</strong></td>
                <td>This restricts the total number of instances.<br>
                    To disable the Quota limit, set its value to <code>0</code>.</td>
        </tr>
        <tr><td><strong>Bucket Prefix</strong></td>
                <td>A short name to prefix all bucket names.</td>
        </tr>
</table>


3. S3 has one default plan called **standard**. In Service Broker for AWS 1.4 and later you can add more. A service plan can be configured to require an S3 bucket to be encrypted. This can be done by creating an AWS KMS Key -- link to key here -- and entering the KMS Key ARN in the service plan's configuration.
    <%= image_tag("images/aws-sb-s3plans.png") %>

1. Click **Save**.

###<a id="sqs-config"></a>SQS Config
1. Select the **SQS Config** side-tab.
    <%= image_tag("images/aws-sb-sqsconfig.png") %>

1. Fill out the fields on the **SQS Config** pane:
<table class="nice">
        <th>Field</th>
        <th>Description</th>
        <tr><td><strong>Override Default AWS Region</strong></td>
                <td>This gives you the option to override the default AWS Region used as the location for the service.<br>
                To override the default, provide the name of the region you want to use.<br>
                To use the default Availability Zone, leave this field blank.</td>
        </tr>
        <tr><td><strong>Enable in Marketplace</strong></td>
                <td>Select this if you want to enable the service in the Services Marketplace.</td>
        </tr>
        <tr><td><strong>Service Key Policy Name</strong></td>
                <td>This is the name of the managed policy that is attached to credentials generated by the Create Service Key command.<br>
                    This has a default setting. Do not change this unless you created a custom policy as described in [Service Key Policies](#service-key-policies).<br></td>
        </tr>
        <tr><td><strong>Quota Limit</strong></td>
                <td>This restricts the total number of instances.<br>
                    To disable the Quota limit, set its value to <code>0</code>.</td>
        </tr>
        <tr><td><strong>Queue Prefix</strong></td>
                <td>A prefix for the queue name used for filtering a list of results</td>
        </tr>
        <tr><td><strong>Default Visibility Timeout</strong></td>
                <td>The number of seconds during which the queue will be unavailable once a message is delivered from the queue.</td>
        </tr>
        <tr><td><strong>Message Retention Period</strong></td>
                <td>The number of seconds Amazon SQS retains a message.</td>
        </tr>
        <tr><td><strong>Max Message Size</strong></td>
                <td>The number of bytes a message can contain before Amazon SQS rejects it.</td>
        </tr>
        <tr><td><strong>Delivery Delay</strong></td>
                <td>The number in seconds that the delivery of all messages in the queue will be delayed.</td>
        </tr>
        <tr><td><strong>Rx Message Wait Time</strong></td>
                <td>The number in seconds that the receiver action waits until a message is in the queue.</td>
        </tr>
        <tr><td><strong>Redrive Policy</strong></td>
                <td>
                    Specifies an existing dead letter queue to receive messages after the source queue fails to process a message a specified number of times.<br>
                    If enabled, this policy includes the following properties:<br><br>
                    <ul>
                    <li><strong>Dead Letter Queue:</strong>
                        <ul>
                            <li>The ARN of the dead letter queue.
                            </li>
                        </ul>
                    <li><strong>Max Receives:</strong>
                        <ul>
                            <li>The maximum number of times a message is delivered to the source queue before being sent to the dead letter queue.
                            </li>
                        </ul>
                    </ul>
                    For more information on SQS Redrive Policy, see [Using Amazon SQS Dead Letter Queues](http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/SQSDeadLetterQueue.html)
                </td>
        </tr>
</table>

1. Click **Save**.

More information on AWS SQS queue properties is available on Amazon's [AWS::SQS::Queue](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html) page.


###<a id="emr-config"></a>EMR Config
1. Select the **EMR Config** side-tab.
    <%= image_tag("images/aws-sb-emrconfig.png") %>

1. Fill out the fields on the **EMR Config** pane:
<table class="nice">
        <th>Field</th>
        <th>Description</th>
        <tr><td><strong>Override Default AWS Region</strong></td>
                <td>This gives you the option to override the default AWS Region used as the location for the service.<br>
                To override the default, provide the name of the region you want to use.<br>
                To use the default Availability Zone, leave this field blank.</td>
        </tr>
        <tr><td><strong>Override Default AWS Availability Zone</strong></td>
                <td>This gives you the option to override the default Availability Zone used by the service.<br>
                    To override the default, provide the name of the Availability Zone you want to use.<br>
                    To use the default Availability Zone, leave this field blank.</td>
        </tr>
        <tr><td><strong>Enable in Marketplace</strong></td>
                <td>Select this if you want to enable the service in the Services Marketplace.</td>
        </tr>
        <tr><td><strong>EMR Service Role</strong></td>
                <td>This enables EMR to call other AWS Services, such as EC2, on your behalf.<br>
                    Populate this field with the Service Role you provided during the **Create Roles (EMR Only)** portion of [Step 1: Set Up AWS](#setup).<br>
                    The recommended value is <code>PCF\_EMR\_Service\_Role</code>.</td>
        </tr>
        <tr><td><strong>EC2 Instance Profile</strong></td>
                <td>This provides access to other AWS services, such as S3 and DynamoDB, from EC2 instances launched by EMR.<br>
                    The recommended value is <code>PCF\_EMR\_EC2\_Instance\_Profile</code>.</td>
        </tr>
        <tr><td><strong>Service Key Policy Name</strong></td>
                <td>This is the name of the managed policy that is attached to credentials generated by the Create Service Key command.<br>
                    This has a default setting. Do not change this unless you created a custom policy as described in [Service Key Policies](#service-key-policies).<br>
                    The recommended value is <code>PCFAppDeveloperPolicy-emr</code>.</td>
        <tr><td><strong>Bind Policy Name</strong></td>
                <td>This the name of the managed policy that is attached to credentials generated by the bind operation.<br>
                    The recommended value is <code>PCFAppBindPolicy-emr</code>.</td>
        </tr>
        <tr><td><strong>EMR Instance Prefix</strong></td>
                <td>This the value used as the prefix for EMR cluster identifiers and related cloudformation stacks in AWS.<br>
                    The recommended value is <code>cf</code>.</td>
        </tr>
        <tr><td><strong>EMR Plans</strong></td>
                <td>
                    EMR has one default plan called **standard**<br>
                    If used, this plan includes the following properties:<br><br>
                    <ul>
                    <li><strong>Dead Letter Queue:</strong>
                        <ul>
                            <li>The ARN of the dead letter queue.
                            </li>
                        </ul>
                    <li><strong>Max Receives:</strong>
                        <ul>
                            <li>The maximum number of times a message is delivered to the source queue before being sent to the dead letter queue.
                            </li>
                        </ul>
                    </ul>
                    For more information on SQS Redrive Policy, see [Using Amazon SQS Dead Letter Queues](http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/SQSDeadLetterQueue.html)
                </td>
        </tr>
</table>

1. Under **EMR Plans**, there should be a plan called **standard**.
    <%= image_tag("images/aws-sb-emrplans.png") %>

    If used, this plan includes the following properties:
    <table class="nice">
        <th>Field</th>
        <th>Description</th>
        <tr><td><strong>Plan Name</strong></td>
                <td>The name of the plan in the Services Marketplace.</td>
        </tr>
        <tr><td><strong>Plan Description</strong></td>
                <td>The description of the plan in the Services Marketplace.</td>
        </tr>
        <tr><td><strong>Plan Features</strong></td>
                <td>The list of features displayed in Apps Manager.</td>
        </tr>
        <tr><td><strong>Free</strong></td>
                <td>Enable whether this plan appears as free in the Services Marketplace.</td>
        </tr>
        <tr><td><strong>Allow Auto Scaling</strong></td>
                <td>Enable or disable the auto scaling for the cluster.</td>
        </tr>
        <tr><td><strong>EMR release</strong></td>
                <td>This is the version of EMR you wish to use.<br>
                    Value is set to <code>emr-5.8.0</code> by default.</td>
        </tr>
        <tr><td><strong>Master instance type</strong></td>
                <td>This is the EC2 instance type for the master instance.<br>
                    Value is set to <code>m3.xlarge</code> by default.</td>
        </tr>
        <tr><td><strong>Core instance type</strong></td>
                <td>This is the EC2 instance type for all core instances.<br>
                    Value is set to <code>m3.xlarge</code> by default.</td>
        </tr>
        <tr><td><strong>Number of core instances</strong></td>
                <td>This is the number of core instances to launch.<br>
                    Value is set to <code>2</code> by default.</td>
</table>

1. Click **Save**.


###<a id="errands"></a>Errands
Errands are tasks that are needed to support various operations of brokers, or PCF installations. They are scripts that run at designated points during an installation. These can include installation, test, or deletion.
Service Broker for AWS has a deploy errand for deploying the service broker, as well as a remove errand, to remove the broker.

1. Select the **Errands** side-tab.
    <%= image_tag("images/aws-sb-errands.png") %>

1. Fill out the fields on the **Errands** pane:
    <table class="nice">
        <th>Field</th>
        <th>Description</th>
        <tr><td><strong>Post-Deploy Errands</strong></td>
                <td>These are tasks that are run after a deployment.<br>
                    Value is set to <code>On</code> by default.</td>
        </tr>
        <tr><td><strong>Pre-Deploy Errands</strong></td>
                <td>These are tasks that are run before a deployment.<br>
                    Value is set to <code>On</code> by default.</td>
        </tr>
</table>

<p class="note warning"><strong>Warning:</strong> The <b>Deploy Broker</b> and <b>Remove Broker</b> errands are essential for Service Broker for AWS to function.
These configurations should both remain set to their default states of <code>On</code>.
Should these be turned off, unintended behavior may occur.</p>


###<a id="resource-config"></a>Resource Config
Resources define the hardware configurations of the Virtual Machines (VMs) running errands.
These VMs get destroyed when the errand is complete.
This pane allows the user to manage the resource usage of Service Broker for AWS.

1. Select the **Resource Config** side-tab.
    <%= image_tag("images/aws-sb-resourceconfig.png") %>

1. Fill out the fields on the **Resource Config** pane:
    <table class="nice">
        <th>Field</th>
        <th>Description</th>
        <tr><td><strong>Deploy Broker</strong></td>
                <td>This controls the errand that deploys the service broker.<br>
                    The recommended value is <code>Automatic: micro (cpu: 1, ram: 1GB, disk: 8GB)</code></td>
        </tr>
        <tr><td><strong>Remove Broker</strong></td>
                <td>This controls the errand that removes the service broker.<br>
                    The recommended value is <code>Automatic: micro (cpu: 1, ram: 1GB, disk: 8GB)</code></td>
        </tr>
</table>

<p class="note"><strong>Note:</strong> The recommendation is to use the <code>Automatic</code> setting for both the <b>Instances</b> and <b>VM Type</b> fields. However, any other selection should work.</p>


###<a id="stemcell"></a>Stemcell
A stemcell is a versioned Operating System image wrapped with IaaS specific packaging.
This is the template from which Ops Manager creates the VMs needed for a wide variety of components and products.
A minimum version is required, and is dependent on your cloud platform (AWS, Azure, vSphere, etc.).

To access and download the stemcell required for your platform, see [Stemcells for PCF](https://network.pivotal.io/products/stemcells/)

1. Select the **Stemcell** side-tab.
    <%= image_tag("images/aws-sb-stemcell.png") %>

1. Select the **Import Stemcell** button.
<table class="nice">
        <th>Field</th>
        <th>Description</th>
        <tr><td><strong>Import Stemcell</strong></td>
                <td>This allows the User to add the stemcell for their platform to Ops Manager.</td>
        </tr>
</table>


##<a id="confirm"></a>Step 5: Confirm Installation
Follow the steps below to confirm your Service Broker for AWS installation.

<p class="note"><strong>Note</strong>: The Service Broker for AWS installs an app called <code>aws-services-broker</code> in the <code>iaas-brokers</code> space of the <code>system</code> org. Like other CF apps, you can view the application logs via the CF CLI by connecting to that org and space with the correct permissions.</p>

1. After Ops Manager finishes the installation, the **Service Broker for AWS** tile appears on the **Installation Dashboard**.
    <%= image_tag("images/aws-sb-install.png") %>

1. In Apps Manager, all Orgs and Spaces show the new services in the Services Marketplace. 
Users can create instances of these services through Apps Manager or by using the cf CLI. 
Review [Creating and Managing Service Instances](creating.html) for more information.
    <%= image_tag("images/aws-sb-marketplace.png") %>
