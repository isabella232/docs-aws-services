---
breadcrumb: PCF Services
title: Installing the Service Broker
---

This topic describes how to install the Service Broker for AWS by configuring your AWS account and importing the product file into Ops Manager.

##<a id="prerequisites"></a>Installation Prerequisites

* Pivotal Cloud Foundry version 1.8 or higher
* An Amazon Web Services (AWS) account
* Pivotal MySQL, or an already-created MySQL or PostgreSQL database

##<a id="setup"></a>Step 1: Set Up AWS

In this step, you configure your AWS account to allow the Service Broker for AWS to create and manage AWS resources. 

Create a new Identity and Access Management (IAM) user for the PCF cluster in the **AWS IAM** console by following the procedure below. 
<p class="note"><strong>Note</strong>: If you have more than one PCF deployment, you must create an IAM user for each deployment. 
Create a new IAM user in your AWS account (do not use the same IAM user that installed PCF on AWS,
as that user profile has different policy restrictions).</p> 

1. Select **Policies** and click **Create Policy**. 
1. Choose **Create Your Own Policy**. 
1. Enter `PCFInstallationPolicy` for **Policy Name** and `Installation Policy for PCF` for  **Description**. 
<p class="note"><strong>Note</strong>: The Service Broker for AWS also allows a custom name for the `PCFInstallationPolicy`. 
If you wish to use a custom name, provide it here instead of `PCFInstallationPolicy`. 
Later, during Broker Configuration, you will need to enter this custom name.</p>  
1. Copy the following text into the **Policy Document** section:

            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Action": [
                            "s3:CreateBucket",
                            "s3:DeleteBucket",
                            "s3:PutBucketAcl",
                            "s3:PutBucketLogging",
                            "s3:PutBucketPolicy",
                            "s3:PutBucketTagging",
                            "s3:GetObject",
                            "s3:ListBucket",
                            "iam:CreateAccessKey",
                            "iam:CreateUser",
                            "iam:GetUser",
                            "iam:DeleteAccessKey",
                            "iam:DeleteUser",
                            "iam:DeleteUserPolicy",
                            "iam:ListAccessKeys",
                            "iam:ListAttachedUserPolicies",
                            "iam:ListUserPolicies",
                            "iam:ListPolicies",
                            "iam:PutUserPolicy",
                            "iam:GetPolicy",
                            "iam:GetAccountAuthorizationDetails",
                            "rds:CreateDBCluster",
                            "rds:CreateDBInstance",
                            "rds:DeleteDBCluster",
                            "rds:DeleteDBInstance",
                            "rds:DescribeDBClusters",
                            "rds:DescribeDBInstances",
                            "rds:DescribeDBSnapshots",
                            "rds:DeleteDBSnapshot",
                            "rds:CreateDBParameterGroup",
                            "rds:ModifyDBParameterGroup",
                            "rds:DeleteDBParameterGroup",
                            "dynamodb:ListTables",
                            "dynamodb:DeleteTable",
                            "dynamodb:DescribeTable",
                            "sqs:CreateQueue",
                            "sqs:DeleteQueue"
                        ],
                        "Effect": "Allow",
                        "Resource": "*"
                    }
                ]
            }
1. Click **Validate Policy** to check for errors. 
1. Click **Create Policy**. This creates an AWS policy that you must apply to every IAM user you create for the Service Broker for AWS. 
1. For each IAM user, click the user name > **Permissions** tab > **Attach Policy** and select **PCFInstallationPolicy**. 
1. Record the **AWS Access Key ID** and **Secret Access Key** for each of your PCF IAM accounts for later use.

### Set Up EMR Policy 
Amazon Elastic MapReduce (EMR) is a managed cluster platform for AWS that simplifies running big data frameworks, such as Apache Hadoop and Apache Spark, to process and analyze vast amounts of data. The PCF EMR Service Broker enables users to provision and manage an Amazon EMR cluster.

Prerequisite: You must first create your AWS IAM user before you can configure the EMR policy. 
For information about creating your AWS IAM user, see [Set Up AWS](#setup), above.

EMR requires that the **AmazonElasticMapReduceFullAccess** policy be attached to the service broker's IAM user. 
Follow these steps to attach the policy to the user:

1. View your IAM users. Locate the IAM user that you created in [Set Up AWS](#setup), above.
1. In the user summary page, click **Add Permissions**.
1. Select **Attach existing policies directly**.
1. Find **AmazonElasticMapReduceFullAccess** and attach it to the user.

#### Create Roles (EMR Only)

EMR requires two roles in order to provision a cluster:

+ an EMR service role
+ an EMR EC2 instance profile

By default, the AWS Broker uses `PCF_EMR_Service_Role` and `PCF_EMR_EC2_Instance_Profile`. You need to create these roles and attach the necessary AWS managed policies.

**Create the EMR Service Role (Required)**

1. In the IAM Console, select **Roles** and click **Create Role**.
1. In the **Select type of trusted entity** section, click **AWS service.**
1. In the **Choose the service that will use this role** section, click **EMR**. 
1. In the **Select your use case** section, click **EMR**, which is followed by the description "Allows Elastic MapReduce to call AWS services such as EC2 on your behalf."
1. Click **Next:Permissions**.
1. The **Attached permissions policy** page should state that the type of role you selected requires the **AmazonElasticMapReduceRole** policy. Click **Next:Review**.
1. On the Review page, provide a **Role name** and a **Role description**. Pivotal recommends using `PCF_EMR_Service_Role` as the name and `EMR Service Role for AWS Broker` as the description.
1. Click **Create role**.

**Create the EMR EC2 Instance Profile (Required)**

1. In the IAM Console, select **Roles** and click **Create Role**.
1. In the **Select type of trusted entity** section, click **AWS service.**
1. In the **Choose the service that will use this role** section, click **EMR**.
1. In the **Select your use case** section, click **EMR Role for EC2**, which is followed by the description "Allows EC2 instances in an Elastic MapReduce cluster to call AWS services such as S3 on your behalf."
1. On the Review page, provide a **Role name** and a **Role description**. Pivotal recommends using `PCF_EMR_EC2_Instance_Profile` as the name, and `EMR EC2 Instance Profile for AWS Broker` as the description.
1. After you have created the role, select **Roles**. From the **Role name** list, click `PCF_EMR_EC2_Instance_Profile` or whatever name you used for the role that you just created. On the  **Summary** page for the role, verify that it has an associated **Instance Profile ARN**. The Amazon Resource Name (ARN) is a string value.

**Create the EMR Auto Scaling Role (Optional)**

EMR also requires an additional role to enable autoscaling: `EMR_AutoScaling_DefaultRole`.
The role is automatically created for you by AWS (if it does not yet exist) under very specific circumstances. 
It cannot be created in the same way as the previous roles. In order to create it, you must follow the instructions in the relevant section below. 
For more information about the Auto Scaling role, see [Creating the IAM Role for Automatic Scaling](http://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-automatic-scaling.html#emr-automatic-scaling-iam-role).

Creating this Auto Scaling role requires different manual steps due to limitations within the GO SDK/AWS IAM Role creation console. 
The easiest and quickest way to ensure that `EMR_AutoScaling_DefaultRole` is set up correctly 
is to create an EMR Cluster through the EMR Console. You can terminate the cluster immediately after the role is created.
In the IAM Console, search for `EMR_AutoScaling_DefaultRole`. If the role already exists, click it to review summary information.
Verify that the role:

+ has the AWS managed policy called **AmazonElasticMapReduceforAutoScalingRole** attached
+ shows, under the **Trust relationships** tab, that **elasticmapreduce.amazonaws.com** and
**application-autoscaling.amazonaws.com** are recognized as **Trusted entities**.

If the role exists and has these properties, no further configuration is necessary.

If the `EMR_AutoScaling_DefaultRole` does not exist, perform the follow steps:

1. In the EMR Console, click **Create Cluster**.
1. Select **Go to advanced options**.
1. Click **Next** to accept default settings until **Step 4: Security
Under Permissions**. At this step, select **Custom**.
1. For **Auto Scaling role**, select **Create default role**.
1. Click **Create Cluster**.
1. Check IAM to see that EMR_AutoScaling_DefaultRole was created.
1. Terminate your cluster.

For more information about creating IAM roles, see [Configure IAM Roles and the Amazon EC2 Instance Profile to Access Other AWS Services](http://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-iam-roles.html).

###<a id="service_key_policies"></a>Service Key Policies
The Service Broker for AWS allows app developers to create service keys for their service instances. Creating a service key creates an IAM user with a templated policy and provides the developer with Access Key credentials to the actions listed in the policies below.

As of v1.1.0, Service Key policy names are configurable. You can choose your own policy name and configure that name in each service by updating the **Service Key Policy Name** field. The default names are used below. 

Create the policy templates for each service that you will enable by logging into the AWS console and doing the following:

1. Select **Policies** and click **Create Policy**. 
1. Choose **Create Your Own Policy**. 
1. Enter `PCFAppDeveloperPolicy-s3` for **Policy Name** and `Service Broker for AWS Service Key policy for S3` for  **Description**.
1. Enter the following text in the **Policy Document** section, or create your own policy template.

            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "allowtagging",
                        "Effect": "Allow",
                        "Action": [
                            "s3:GetBucketTagging",
                            "s3:PutBucketTagging"
                        ],
                        "Resource": [
                            "arn:aws:broker:resource::"
                        ]
                     }
                 ]
             }

1. Click **Validate Policy** to check for errors. 
1. Click **Create Policy**. This creates an AWS policy that you must apply to every IAM user you create for the Service Broker for AWS. 
1. Repeat steps 1-6 for `PCFAppDeveloperPolicy-sqs` `PCFAppDeveloperPolicy-dynamodb` `PCFAppDeveloperPolicy-rds` and `PCFAppDeveloperPolicy-emr`; using or modifying the examples below.

<strong>`PCFAppDeveloperPolicy-sqs` Example</strong>

```
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "Stmt1471890189000",
            "Effect": "Allow",
            "Action": [
                "sqs:ListQueues",
                "sqs:PurgeQueue",
                "sqs:ReceiveMessage",
                "sqs:SendMessage"
            ],
            "Resource": [
                "arn:aws:broker:resource::"
            ]
        }
    ]
}
```

<strong>`PCFAppDeveloperPolicy-dynamodb` Example</strong>

```
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "Stmt1471873911000",
            "Effect": "Allow",
            "Action": [
                "dynamodb:*"
            ],
            "Resource": [
                "arn:aws:broker:resource::"
            ]
        }
    ]
}
```

<strong>`PCFAppDeveloperPolicy-rds` Example</strong>

```
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "Stmt1471636048000",
            "Effect": "Allow",
            "Action": [
                "rds:ListTagsForResource",
                "rds:DescribeDbInstances"
            ],
            "Resource": [
                "arn:aws:broker:resource::"
            ]
        }
    ]
}
```

<strong>`PCFAppDeveloperPolicy-emr` Example</strong>

```
{
    "Version": "2012-10-17",
    "Statement": [{
        "Sid": "emrServiceKeyActions",
        "Effect": "Allow",
        "Action": [
            "elasticmapreduce:AddJobFlowSteps",
            "elasticmapreduce:CancelSteps",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:DescribeStep",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListSteps",
            "elasticmapreduce:ListBootstrapActions",
            "elasticmapreduce:PutAutoScalingPolicy"
        ],
        "Resource": [
            "*"
        ]
    }]
}
```

###Bind Key Policies
In v1.5.0 of the AWS Services Broker, EMR setup requires that you specify a Bind Key policy separately from a Service Key policy. 

EMR does not use ARNs for access control, so the `Resource` you use to set up the policy must be `*`.
Because access control is enforced with cluster tagging, Pivotal recommends ensuring that 
applications/service key users do not have permission to modify cluster tags.
The broker will automatically add a condition to the policy that limits access to 
the associated EMR cluster. For more information, see [EMR Cluster Access](http://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-access-iam.html#emr-fine-grained-cluster-access).

To create the bind key policy template for EMR, log in to the AWS console and follow steps 1 - 6 of [Service Key Policies](#service_key_policies), above, using the following example:
```
{
    "Version": "2012-10-17",
    "Statement": [{
        "Sid": "emrBindActions",
        "Effect": "Allow",
        "Action": [
            "elasticmapreduce:AddJobFlowSteps",
            "elasticmapreduce:CancelSteps",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:DescribeStep",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListSteps",
            "elasticmapreduce:ListBootstrapActions",
            "elasticmapreduce:PutAutoScalingPolicy"
        ],
        "Resource": [
            "*"
        ]
    }]
}
```

##<a id="create_database"></a>Step 2: Create a Service Broker Database

The Service Broker for AWS requires access to a MySQL or PostgreSQL database that is highly available and regularly backed up in order to store its configuration information. Loss of this data will severely affect the ability of the service broker to manage configured service instances. However, the AWS resources will not be affected. 

The database can be Pivotal MySQL or an external MySQL or PostgreSQL database (including an AWS RDS database). 

If you choose to use a Pivotal MySQL database, the service broker will automatically provision the database. 

If you choose to use an RDS MySQL or RDS PostgreSQL database, follow these steps:

1. In the AWS RDS console, create the appropriate database:
    * Choose the smallest DB instance class, `db.t2.micro`. 
    * Select `yes` for **Multi-AZ Deployment**. 
    * Choose `Provisioned IOPS (SSD)` for **Storage Type**. For a non-production database, you can choose `General Purpose (SSD)`.
    * Enter the minimum accepted value '5' to '100' GB of **Allocated Storage**. 
    * Leave **Provisioned IOPS** at the default value.
    * Enter `pcf-aws-services` for the **DB Instance Identifier**.
    * Enter suitable values for the **Master Username** and **Master Password**.

2. Record the Database IP, Database Port, Admin user, Admin password and Database Name. The Service Broker for AWS stores configuration information in this database. 

3. Ensure that the Service Broker for AWS will be able to connect to your database. If necessary for your deployment, modify your AWS VPC settings to allow access to the RDS database from an external IP address. For more information, see [Accessing a DB Instance in a VPC](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.Scenarios.html) in the AWS documentation.

##<a id="ASGs"></a>Step 3: Create Application Security Groups

To allow this service to have network access, you need to create Application Security Groups (ASGs). ASGs are collections of egress rules that specify the protocols, ports, and IP address ranges where app or task instances send traffic.

<p class="note"><strong>Note</strong>: Without Application Security Groups, the service will not be usable.</p>

### <a id="service-container-network-connections"></a> Service Container Network Connections###

This service is deployed as an application to the `iaas-brokers` space in the
`system` org, and requires the following outbound network connections:

|Destination        |Ports       |Protocol   |Reason
|---                |---         |---        |---
|`AWS_IP_RANGE`     |443, 5432, 1521, 1433, 3306         |tcp        |This service accesses RDS/S3

<p class="note"><strong>Note</strong>: The AWS IP range is available from <a href="http://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html#aws-ip-download">Amazon</a>. You may choose to use <a href="https://curl.haxx.se/">curl</a> and <a href="https://stedolan.github.io/jq/">jq</a> to convert the IP range as downloaded from Amazon into ASG rules:
      </p>

```
    curl -s https://ip-ranges.amazonaws.com/ip-ranges.json | \
    jq '[
      {
        ports: "443, 5432, 1521, 1433, 3306",
        protocol: "tcp",
        destination: .prefixes | map(select(.service == "AMAZON")) | .[] | .ip_prefix
      }
    ] | .' > aws-service-broker.json

```

This creates a configuration which allows traffic for all AWS Regions. You may wish to further filter the list of entries in the Application Security Group config to a specific set of AWS Regions by adding additional `jq` `map(select(.region == "REGION_NAME"))` statements for each region.

 Log in as an administrator and create an ASG called `aws-service-broker`, binding it to the `iaas-brokers` space in the `system` org:
<pre class="terminal">
$ cf create-security-group aws-service-broker aws-service-broker.json
$ cf bind-security-group aws-service-broker system iaas-brokers
</pre>


### <a id="application-container-network-connections"></a> Application Container Network Connections ###

Application containers that use instances of this service require the following outbound network connections:

|Destination        |Ports       |Protocol   |Reason
|---                |---         |---        |---
|`AWS_IP_RANGE`     |443, 5432, 1521, 1433, 3306         |tcp        |Application containers may access S3/RDS

Create an ASG called `aws-service-broker-app-containers` with the above configuration and bind it to the appropriate space. To give access to all started apps, use the `default-running` ASG set. For example:

```
[
  {
      "ports": "443, 5432, 1521, 1433, 3306",
      "protocol": "all",
      "destination": "192.0.2.0/14"
  },
  {
      "ports": "443, 5432, 1521, 1433, 3306",
      "protocol": "all",
      "destination": "198.51.100.0/22"
  },
  ...rest of AWS IPs elided...
]
```

##<a id="install"></a>Step 4: Install the Service Broker Tile in Ops Manager

To install the Service Broker for AWS tile in Ops Manager, complete the following steps:

1. Download the Service Broker for AWS product file from [Pivotal Network](https://network.pivotal.io/products/pcf-service-broker-for-aws).

1. From the Ops Manager Installation Dashboard, click **Import a Product** to upload the product file.

1. Click **Add** next to the uploaded product description in the **Available Products** view to add the product to your staging area.

1. Click on the newly added tile to configure the sections as described below.

###<a id="aws-config"></a>AWS Config

The setup in Step 1 must be successfully completed before beginning this configuration. You will need the AWS and database parameters from that step to successfully configure the broker.

1. Select the **AWS Config** side-tab.
    <%= image_tag("aws-sb-awsconfig.png") %>

1. Fill out the fields on the **AWS Config** pane:
<table class="nice">
        <th>Field</th>
        <th>Description</th>
        <tr><td><strong>Access Key ID</strong></td>
                <td>!!!WIP: Enter the **AWS Access Key ID** from [Step 1](#setup).</td>
        </tr>
        <tr><td><strong>Secret Access Key</strong></td>
                <td>!!!WIP: Enter the **Secret Access Key** from [Step 1](#setup).</td>
        </tr>
        <tr><td><strong>Temporary Credentials Timeout</strong></td>
                <td>Value stated in minutes.<br>
                    This is the time after which service key credentials will expire.<br>
                    To disable credential expiry, use a value of <code>0</code>.</td>
        </tr>
        <tr><td><strong>AWS Endpoint</strong></td>
                <td>Only modify this field if you are using Amazon’s Commercial Cloud Service.<br>
                    Otherwise, leave it as <code>Default</code>.</td>
        </tr>
        <tr><td><strong>Default Region</strong></td>
                <td>This is the AWS region that will be used as the default.<br>
                    You can change this later for a particular service.</td>
        </tr>
        <tr><td><strong>Default Availability Zone</strong></td>
                <td>This is the AWS Availability Zone that will be used as the default.<br>
                    This default will only be used where Multi-AZ is not selected.</td>
        </tr>
        <tr><td><strong>Default Tags</strong></td>
                <td>The broker automatically creates AWS tags for the service plan GUID
                    and the org-space GUID.<br>
                    You can also configure default tags to add for each AWS resource by entering them in the Default Tags text box, separated by a space.<br><br>
                    For example: <code>owner=operations env=production app=payroll</code>.</td>
        </tr>
</table>

1. Click **Save**.

###<a id="broker-config"></a>Broker Config
1. Select the **Broker Config** side-tab.
    <%= image_tag("images/aws-sb-brokerconfig.png") %>

<table class="nice">
        <th>Field</th>
        <th>Description</th>
        <tr><td><strong>App Instances</strong></td>
                <td>!!!WIP: Enter the **AWS Access Key ID** from [Step 1](#setup).</td>
        </tr>
        <tr><td><strong>Broker IAM Policy Name</strong></td>
                <td>!!!WIP: Enter the **AWS Access Key ID** from [Step 1](#setup).</td>
        </tr>
        <tr><td><strong>Pivotal MySQL > Plan Name</strong></td>
                <td>Pivotal MySQL enter the Plan Name to be used (e.g. 100mb) and a unique database name.<br>
                    The database will be created during deployment if it does not exist.</td>
        </tr>
        <tr><td><strong>External MySQL / External Postgres</strong></td>
                <td><ul>
                    <li>Database Host
                        <ul>
                            <li>Enter the IP address of the database where the Service Broker for AWS will store configuration information.<br>
                                !!!WIP: You can use the database you created in the AWS RDS console in [Step 1](#setup), or choose to use an existing database.
                            </li>
                        </ul>
                    <li> Database Port
                        <ul>
                            <li>Enter the port number of your database.<br>
                                The default for <b>PostgreSQL</b> is <code>5432</code> and the default for <b>MySQL</b> is <code>3306</code>.
                            </li>
                        </ul>
                    <li> Database Username / Password
                    <li> Database Port
                    </ul>
                </td>
        </tr>
        <tr><td><strong>Database SSL Connection</strong></td>
                <td>Select <code>Enabled</code> if you want to encrypt traffic to your database, and add your custom root certificate in the Root Certificate text box.<br>
                    Otherwise, select <code>Disabled</code>.</td>
        </tr>
</table>


2. For **App Instances**, enter the number of instances of the service broker you want to run. The default is `2`.
3. Do not change the **Broker IAM Policy Name** unless you configured a custom policy name as described in [Set Up AWS](#setup), above. 
4. For **Backing Database**, choose the database type for the Service Broker Configuration. 
5. If you chose **Pivotal MySQL** enter the **Plan Name** to be used (e.g. 100mb) and a unique database name. The database will be created during deployment if it does not exist. 
6. If you chose **External MySQL** or **External Postgres**:
    1. For **Database Host** enter the IP address of the database where the Service Broker for AWS will store configuration information. You can use the database you created in the AWS RDS console in [Step 1](#setup), or choose to use an existing database.
    2. For **Database Port**, enter the port number of your database. The default for PostgreSQL is 5432 and the default for MySQL is 3306.
    3. For **Database Username** and **Database Password**, enter your database credentials.
    4. For **Database Name**, enter the name of the database.
7. Under **Database SSL Connection**, select **Enabled** if you want to encrypt traffic to your database and add your custom root certificate in the **Root Certificate** text box. Otherwise, select **Disabled**.
8. Click **Save**.

Note: in the following sections that configure AWS Services, if you don't want to offer that specific service in your PCF Marketplace then simply clear the **Enable in Marketplace** checkbox.


###<a id="dynamodb-config"></a>DynamoDB Config
1. Select the **DynamoDB Config** side-tab.
    <%= image_tag("images/aws-sb-dynamodbconfig.png") %>

1. Under **Override Default AWS Region** select the default AWS region.

1. Select **Enable in Marketplace** if you want to enable the service in the Services Marketplace.

1. The **Service Key Policy Name** has a default setting. Do not change this unless you created a custom policy as described in [Service Key Policies](#service_key_policies). 

1. The **Quota Limit** restricts the total number of instances, setting it to 0 will disable it.



###<a id="rds-config"></a>RDS Config
1. Select the **RDS Config** side-tab.
    <%= image_tag("images/aws-sb-rdsconfig.png") %>

1. Under **Override Default AWS Region** select the default AWS region.

1. Under **Override Default AWS Availability Zone** select the default Availability Zone for RDS database instances.
1. The **RDS Instance Prefix** is set to "cf" by default. It is the prefix for creating RDS database instances.
1. The **Service Key Policy Name** has a default setting. Do not change this unless you created a custom policy as described in [Service Key Policies](#service_key_policies). 
1. The **Networking** section allows you to configure whether to use the Default VPC or a Custom VPC, and whether the instance is publicly accessible. For a Custom VPC, enter the DB Subnet Group Name and the VPC Security Group(s). 
1. The setting **Enable Storage Encryption** is off by default. You can enable RDS encryption for a database instance. However, not all regions and DB instance classes support encryption so if you enable this option, you will need to change the default plans to remove those that don't support encryption. More information is available [here.](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html#d0e21710)

1. Select **Enable in Marketplace** to enable the service in the Services Marketplace.

1. Under **Plans**, for each RDS Database, the Service Broker for AWS includes several default plans for use.
    * **basic**: For small projects and during development.
    * **standard**: For a small production database (multi-AZ, 2vCPU, 7.5GB).
    * **premium**: For a mid-sized database (multi-AZ, 4 vCPU, 15GB).
    * **enterprise**: For a large database (multi-AZ, 8 vCPU, 32GB).

1. You can view and edit the configuration of existing plans by clicking the arrow next to their names.
    <%= image_tag("images/aws-sb-rdseditplan.png") %>
    <p class="note"><strong>Note</strong>: If you edit an existing service plan, only future instances of that services plan will be changed. Ask your Admin to modify existing instances.</p>
1. You can also create a new custom plan by clicking the **Add** button and completing the following fields:
    - **Plan Name**: The name of the plan in the Services Marketplace.
    - **Plan Description**: The description of the plan in the Services Marketplace.
    - **Plan Features**: The list of features displayed in Apps Manager.
    - **Engine**: This must be `postgres` or 'mysql'.
    - **Engine Version**: The version that your database uses.
    - **DB Instance Class**: The hardware that runs the database.
    - **Allocated Storage (GB)**: The amount of storage allocated to the database.
    - **Storage Type**: This can be Magnetic, SSD or Provisioned IOPS (`io1`).
    - **IOPS**: The IOPS rate for the database instance. Only required if your **Storage Type** is `io1`.
    - **Backup Retention Period**: How long to retain backups (typically 7 days).
    - **Preferred Backup Window**: When to backup, must be at least 30min window. e.g. 13:00-14:00
    - **Copy Tags to Snapshot**: Whether to tag the database snapshots.
    - **Multi AZ**: Whether to automatically run in multiple Availability Zones.
    - The setting **Enable Storage Encryption** is off by default. If you have not enabled it globally, you can configure it per service plan.
    - For flexibility, the **User Privileges** allows configuration of database user privileges by service plan. Use this to secure the privileges you want for your developers or apps. 
    - **DB Parameter Group Name** allows you to associate an existing DB Parameter Group Name with this service plan. Use the AWS Console to create the DB Parameter Group. 

    <%= image_tag("images/aws-sb-rdsaddplan.png") %>

1. Click **Save**.

###<a id="s3-config"></a>S3 Config
1. Select the **S3 Config** side-tab.
    <%= image_tag("images/aws-sb-s3config.png") %>
1. Under **Override Default AWS Region**, select the default AWS region for this service.
1. Select **Enable in Marketplace** to enable the service in the Services Marketplace.
2. The **Service Key Policy Name** has a default setting. Do not change this unless you created a custom policy as described in [Service Key Policies](#service_key_policies). 
3. The **Quota Limit** restricts the total number of instances, setting it to 0 will disable it. 
2. Enter the **Bucket Prefix**, a short name to prefix all bucket names.
3. S3 has one default plan called "standard", but in Service Broker for AWS 1.4 and later you can add more. A service plan can require an S3 bucket to be encrypted by creating an AWS KMS Key (see AWS SSE-KMS) and entering the KMS key ARN in the service plan configuration. 
        <%= image_tag("images/aws-sb-s3plans.png") %>
4. Click "Save" to store the changed settings.
1. Click **Installation Dashboard** to return to the Ops Manager Installation Dashboard.
1. Click **Apply Changes** to install the product.


###<a id="sqs-config"></a>SQS Config
1. Select the **SQS Config** side-tab.
    <%= image_tag("images/aws-sb-sqsconfig.png") %>
2. Under **Override Default AWS Region**, select the default AWS region for this service.
3. Select **Enable in Marketplace** to enable the service in the Services Marketplace.
4. The **Service Key Policy Name** has a default setting. Do not change this unless you created a custom policy as described in [Service Key Policies](#service_key_policies). 
5. The **Quota Limit** restricts the total number of instances, setting it to 0 will disable it. 
6. For **Queue Prefix**, enter the queue name prefix that will be used for filtering list results.
7. For **Default Visibility Timeout**, enter the length of time during which the queue will be unavailable once a message is delivered from the queue.
8. For **Message Retention Period**, enter the number of seconds Amazon SQS retains a message.
9. For **Max Message Size**, enter the limit of how many bytes a message can contain before Amazon SQS rejects it.
10. For **Delivery Delay**, enter the time in seconds that the delivery of all messages in the queue will be delayed.
11. For **Rx Message Wait Time**, enter the duration, in seconds, that the receiver action waits until a message is in the queue.
12. The **Redrive Policy** specifies an existing dead letter queue to receive messages after the source queue fails to process a message a specified number of times.  If enabled, this policy includes the following properties:
    - **Dead Letter Queue**: The ARN of the dead letter queue.
    - **Max Receives**: The maximum number of times a message is delivered to the source queue before being sent to the dead letter queue.
13. Click **Apply Changes** to install the product.
14. Click **Installation Dashboard** to return to the Ops Manager Installation Dashboard.

More information on AWS SQS queue properties is available [here](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html). For more information on SQS Redrive Policy, refer to the documentation on [Using Amazon SQS Dead Letter Queues](http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/SQSDeadLetterQueue.html)


###<a id="emr-config"></a>EMR Config
1. Select the **EMR Config** side-tab.
    <%= image_tag("images/aws-sb-emrconfig.png") %>
1. **Override Default AWS Region** gives you the option to override the default AWS Region used as the location for the EMR Cluster. To override the default, provide the name of the region you want to use. Leave this field blank to use the default region.
1. **Override Default AWS Availability Zone** gives you the option to override the default Availability Zone used by the service. To override the default, provide the name of the Availability Zone you want to use. Leave this field blank to use the default Availability Zone.
1. The **Enable in Marketplace** option should be checked by default.
1. The **EMR Service Role** enables EMR to call other AWS Services, such as EC2, on your behalf. Populate this field with the Service Role you provided during setup. The recommended value is `PCF_EMR_Service_Role`.
1. The **EC2 Instance Profile** provides access to other AWS services, such as S3 and DynamoDB, from EC2 instances launched by EMR. The recommended value is `PCF_EMR_EC2_Instance_Profile`.
1. The **Service Key Policy Name** has a default setting. Do not change this unless you created a custom policy as described in [Service Key Policies](#service_key_policies). 
This is the name of the managed policy that is attached to credentials generated by the Create Service Key command. The recommended value is `PCFAppDeveloperPolicy-emr`.
1. The **Bind Policy Name** is the name of the managed policy that is attached to credentials generated by the bind operation. The recommended value is `PCFAppBindPolicy-emr`.

1. The **EMR Instance Prefix** is the value used as the prefix for EMR cluster identifiers and related cloudformation stacks in AWS. The recommended value is `cf`.
1. Under **EMR Plans**, there should be a plan called **standard**.
    <%= image_tag("images/aws-sb-emrplans.png") %>
    For this plan:
    1. **Plan Name** is the name of the plan in the Services Marketplace.
    1. **Plan Description** is the description of the plan in the Services Marketplace.
    1. **Plan Features** lists features of the plan displayed in Apps Manager.
    1. Select **Allow Auto Scaling** to enable or disable the auto scaling for the cluster. 
    1. **EMR release** should be the version of EMR you wish to use 
    (Default value is `emr-5.8.0`).
    1. **Master instance type** is the EC2 instance type for the master instance 
    (Default value is `m3.xlarge`).
    1. **Core instance type** is the EC2 instance type for all core instances 
    (Default value is `m3.xlarge`).
    1. **Number of core instances** is the number of core instances to launch 
    (Default value is `2`).


###<a id="errands"></a>Errands
Errands are tasks that are needed to support various operations of brokers, or PCF installations. They are scripts that run at designated points during an installation. These can include installation, test, or deletion.
Service Broker for AWS has a deploy errand for deploying the service broker, as well as a remove errand, to remove the broker.

1. Select the **Errands** side-tab
    <%= image_tag("images/aws-sb-errands.png") %>
1. **Post-Deploy Errands** are tasks run after a deployment (Default value is `On`).
1. **Pre-Deploy Errands** are tasks run before a deployment (Default value is `On`).

<p class="note warning"><strong>Warning:</strong> The <b>Deploy Broker</b> and <b>Remove Broker</b> errands are essential for Service Broker for AWS to function.
These configurations should both remain set to their default states of <code>On</code>.
Should these be turned off, unintended behaviour may occur.</p>


###<a id="resource-config"></a>Resource Config
Resources define the hardware configurations of the Virtual Machines (VMs) running errands.
These VMs get destroyed when the errand is complete.
This pane allows the user to manage the resource usage of Service Broker for AWS.

1. Select the **Resource Config** side-tab
    <%= image_tag("images/aws-sb-resourceconfig.png") %>
1. **Deploy Broker** controls the errand that deploys the service broker
    - (Recommended value is `Automatic: micro (cpu: 1, ram: 1GB, disk: 8GB)`)

1. **Remove Broker** controls the errand that removes the service broker
    - (Recommended value is `Automatic: micro (cpu: 1, ram: 1GB, disk: 8GB)`)

<p class="note"><strong>Note:</strong> The recommendation is to use the <code>Automatic</code> setting for both the <b>Instances</b> and <b>VM Type</b> fields. However, any other selection should work.</p>


###<a id="stemcell"></a>Stemcell
A stemcell is a versioned Operating System image wrapped with IaaS specific packaging.
This is the template from which Ops Manager creates the VMs needed for a wide variety of components and products.
A minimum version is required, and is dependent on your cloud platform (AWS, Azure, vSphere, etc.).

To access and download the stemcell required for your platform, see [Stemcells for PCF](https://network.pivotal.io/products/stemcells/)

1. Select the **Stemcell** side-tab
    <%= image_tag("images/aws-sb-stemcell.png") %>
1. **Import Stemcell** allows the User to add the stemcell for their platform to Ops Manager.


##<a id="confirm"></a>Step 5: Confirm Installation
Follow the steps below to confirm your AWS Service Broker installation.

<p class="note"><strong>Note</strong>: The Service Broker for AWS installs an app called <code>aws-services-broker</code> in the <code>iaas-brokers</code> space of the <code>system</code> org. Like other CF apps, you can view the application logs via the CF CLI by connecting to that org and space with the correct permissions.</p>

1. After Ops Manager finishes the installation, the **Service Broker for AWS** tile appears on the **Installation Dashboard**.

    <%= image_tag("images/aws-sb-install.png") %>
1. In Apps Manager, all orgs and spaces show the new services in the Services Marketplace. Users can create instances of these services through Apps Manager or by using the cf CLI. Review [Creating and Managing Service Instances](creating.html) for more information.

    <%= image_tag("images/aws-sb-marketplace.png") %>
