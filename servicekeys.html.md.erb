---
breadcrumb: PCF Services
title: Using Service Keys with AWS
---

Service keys provide credentials that you can configure manually
for consumers of marketplace services. 
App developers can use these keys to perform tasks against underlying resources
 - for example, S3 buckets or EMR clusters - using the AWS CLI. 
These operations are defined by the Operator using service key policy templates.

For more information on Service Key policies, see [Service Key Policies](installation.html#service_key_policies).

##<a id="create"></a>Create Service Key

Run the following command to create a service key for a service instance:

`cf create-service-key YOUR-SERVICE-INSTANCE SERVICE-KEY-NAME`

Where:

<code>YOUR-SERVICE-INSTANCE</code>: the service instance

<code>SERVIE-KEY-NAME</code>: the name you want to give the service key

For example,
<pre class="terminal">$ cf create-service-key myawsservice mykey1</pre>

##<a id="credentials"></a>Get Credentials for a Service Key

To view the corresponding credentials, run the following command:

`cf service-key YOUR-SERVICE-INSTANCE SERVICE-KEY-NAME`

For example,
<pre class="terminal">$ cf service-key myawsservice mykey1</pre>

This returns credentials in JSON format, containing the `access_key_id`, `secret_access_key` 
and the Amazon Resource Name (`arn`) for the underlying resource in AWS. For example, 
service key credentials for an S3 bucket would return the following:

<pre class="terminal">
{
 "access_key_id": "AKIAIOSFODNN7EXAMPLE",
 "arn": "arn:aws:s3:::my_corporate_bucket",
 "secret_access_key": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
}
</pre>

**EMR Config**, introduced in v1.5.0, does not use Amazon Resource Names. Therefore the `cluster_id` is returned instead.
For example:

<pre class="terminal">
{
  "cluster_id": "my-emr-cluster",
  "master_public_dns_name": "ec2-54-164-153-7.compute-1.amazonaws.com",
  "region": "us-west-2",
  "access_key_id": "GHBIYEGSFOPZ7EXAMPLE",
  "secret_access_key": "vKaBlRTmDIVM/P7PLFRA/sPxBliWRYEXAMPLEKEY"
}
</pre>

<p class="note"><strong>Note</strong>: When you create a service key, a new IAM user is created with a policy defined by the Operator.
   This policy can be configured to optionally time out after a duration specified by the Operator.</p>

##<a id="list"></a>List Service Keys for a Service Instance

To list service keys for a service instance, use the `cf service-keys` command.
For example:

<pre class="terminal">
$ cf service-keys myawsservice
Getting service keys for service instance myawsservice as me@example.com...

SERVICE-KEY-NAME
mykey1
mykey2

</pre>

##<a id="delete"></a>Delete Service Key

<p class="note warning"><strong>Warning:</strong> In addition to removing access to the service instance, 
deleting a service key <strong>also deletes the underlying IAM user.</strong></p>

To delete a service key, use the `cf delete-service-key` command.

`cf delete-service-key YOUR-SERVICE-INSTANCE SERVICE-KEY-NAME` 

Where:

<code>YOUR-SERVICE-INSTANCE</code>: the service instance

<code>SERVIE-KEY-NAME</code>: the name of the service key

For example:

<pre class="terminal">
$ cf delete-service-key myawsservice mykey1

Are you sure you want to delete the service key mykey1 ? y
Deleting service key mykey1 for service instance myawsservice as me@example.com...

OK
</pre>

Add option `-f` to force deletion without confirmation.

<pre class="terminal">
$ cf delete-service-key -f myawsservice mykey1

Deleting service key mykey1 for service instance myawsservice as me@example.com...

OK
</pre>

<br>For more information about service keys, see [Managing Service Keys](https://docs.pivotal.io/pivotalcf/2-0/devguide/services/service-keys.html).
